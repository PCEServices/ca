# -*- coding: utf-8 -*-
"""
/***************************************************************************
 caDockWidget
                                 A QGIS plugin
 Assistant service CA
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2022-11-02
        git sha              : $Format:%H$
        copyright            : (C) 2022 by Romain Lagrange - PCE Services
        email                : romain.lagrange@pceservices.fr
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import shutil
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.PyQt.QtWidgets import QMessageBox
from qgis.PyQt import QtGui, QtWidgets, uic
from qgis.PyQt.QtCore import pyqtSignal
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction
from qgis.core import QgsProject, QgsVectorLayer, QgsField, QgsProcessingFeatureSourceDefinition, QgsFeatureRequest, QgsFeature
from PyQt5.QtCore import QVariant 
from qgis.utils import iface
import processing
import qgis.core
import math
from math import *
from qgis.core import QgsPoint
from qgis.PyQt.QtXml import QDomDocument

FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'ca_dockwidget_base.ui'))


class caDockWidget(QtWidgets.QDockWidget, FORM_CLASS):

    closingPlugin = pyqtSignal()

    def __init__(self, parent=None):
        """Constructor."""
        super(caDockWidget, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://doc.qt.io/qt-5/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)

    def closeEvent(self, event):
        self.closingPlugin.emit()
        event.accept()
    
    #--------------------------------------------------------------------------
    
    def creationC3A(self):
        if str(self.marche.currentText()) == 'ALTITUDE':
            checkcable = None
            checksupport = None
            checkpt = None
            checkboite = None
            for layer in QgsProject.instance().mapLayers().values():
                if 'cable_optique' in layer.name():
                    cablelyrbase = layer
                    checkcable = 1
                if 'support' in layer.name():
                    supportlyr = layer
                    checksupport = 1
                if 'point_technique' in layer.name():
                    ptlyr = layer
                    checkpt = 1
                if 'boite_optique' in layer.name():
                    boitelyr = layer
                    checkboite = 1
                    
            if checkcable == 1 and checksupport == 1 and checkpt == 1 and checkboite ==1 :
                supportlyr.removeSelection()
                cablelyrbase.removeSelection()
                ptlyr.removeSelection()
                
                parameters = { 'DISSOLVE' : False,
                    'DISTANCE' : 0.03,
                    'END_CAP_STYLE' : 0,
                    'INPUT' : cablelyrbase,
                    'JOIN_STYLE' : 0,
                    'MITER_LIMIT' : 2,
                    'OUTPUT' : 'TEMPORARY_OUTPUT',
                    'SEGMENTS' : 5 }
                cablelyr = processing.run("native:buffer", parameters)['OUTPUT']
                
                templyr = QgsVectorLayer("None", "C3A", "memory")
                QgsProject.instance().addMapLayer(templyr)
                templyr.dataProvider().addAttributes([QgsField('Type A', QVariant.String),QgsField('Nom A', QVariant.String),QgsField('Type B', QVariant.String),QgsField('Nom B', QVariant.String),QgsField('Longueur tron√ßon', QVariant.String),QgsField('Diametre alveole', QVariant.String),QgsField('Tubage rigide', QVariant.String),QgsField('Diametre tube', QVariant.String),QgsField('Diametre cable', QVariant.String),QgsField('Commentaire', QVariant.String),QgsField('Percement A', QVariant.String),QgsField('Percement B', QVariant.String),QgsField('Boite', QVariant.String)])
                templyr.startEditing()
                
                for support in supportlyr.getFeatures():
                    supportlyr.select(support.id())
                    parameters = { 'INPUT' : cablelyr,
                        'INTERSECT' : QgsProcessingFeatureSourceDefinition(supportlyr.dataProvider().dataSourceUri(),selectedFeaturesOnly=True, featureLimit=-1, geometryCheck=QgsFeatureRequest.GeometryAbortOnInvalid),
                        'METHOD' : 0,
                        'PREDICATE' : [1] }
                    processing.run('qgis:selectbylocation', parameters)
                    parameters = { 'INPUT' : ptlyr, 'INTERSECT' : QgsProcessingFeatureSourceDefinition(supportlyr.dataProvider().dataSourceUri(), selectedFeaturesOnly=True, featureLimit=-1, geometryCheck=QgsFeatureRequest.GeometryAbortOnInvalid),
                    'METHOD' : 0,
                    'PREDICATE' : [0] }
                    processing.run('qgis:selectbylocation', parameters)
                    lgsupport = int(support["LG_REELLE"])

                    amont = support["AMONT"]
                    while '/0' in amont:
                        amont = amont.replace('/0','/')
                        
                    nomamont = None
                    proprietaireamont = None
                    typeamont = None

                    
                    aval = support["AVAL"]
                    while '/0' in aval:
                        aval = aval.replace('/0','/')

                        
                    nomaval = None
                    proprietaireaval = None
                    typeaval = None
                    intersectboite = None
                    percementA = None
                    percementB = None

                    alveole = None

                    commentaire = None
                    for pt in ptlyr.getFeatures():

                        nompt = str(pt["NOM"])
                        while '/0' in nompt:
                            nompt = nompt.replace('/0','/')

                            
                        if nompt == amont :
                            for boitefeature in boitelyr.getFeatures():
                                if boitefeature.geometry().intersects(pt.geometry()):
                                    if boitefeature["NOM"][0:3] in ['PEC','BPE']:
                                        intersectboite = "A PEO"
                                    else :
                                        if pt["TYPE_STRUC"] == 'APPUI':
                                            intersectboite = "A PB Appui"
                                        if pt["TYPE_STRUC"] == 'CHAMBRE':
                                            intersectboite = "A PB Chambre"
                            nomamont = nompt
                            proprietaireamont = pt["PROPRIETAI"]
                            if pt["TYPE_STRUC"] == 'APPUI':
                                if proprietaireamont == "ORANGE":
                                    if pt["MODELE"] == "POTL":
                                        typeamont = "P"
                                    else:
                                        typeamont = "A"
                                else :
                                    if pt["MODELE"] == "POTL":
                                        typeamont = "PT"
                                    else:
                                        typeamont = "AT"
                                    nomamont = ""
                                    
                            elif pt["TYPE_STRUC"] == 'CHAMBRE':
                                if proprietaireamont == "ORANGE":
                                    typeamont = "C"
                                else :
                                    typeamont = "CT"
                                    nomamont = ""
                                    
                            elif pt["TYPE_STRUC"] == 'ANCRAGE FACADE':
                                typeamont = "F"
                                nomamont = ""
                                
                            elif pt["TYPE_STRUC"] == 'COLONNE MONTANTE' or pt["TYPE_STRUC"] == 'IMMEUBLE':
                                typeamont = "IMB"
                                nomamont = ""
                                
                            elif pt["TYPE_STRUC"] == 'AUTRE':
                                if pt["MODELE"] == "POTL":
                                    typeamont = "PT"
                                else:
                                    typeamont = "A_VERIFIER"
                                nomamont = ""
                            else :
                                typeaval = "A_VERIFIER"
                                
                            for rechercheTRA in supportlyr.getFeatures():
                                if rechercheTRA.geometry().intersects(pt.geometry()):
                                    if rechercheTRA["NOM"][0:3] == 'TRA':
                                        percementA = 'OUI'
                       
                        elif nompt == aval :
                            if intersectboite == None:
                                for boitefeature in boitelyr.getFeatures():
                                    if boitefeature.geometry().intersects(pt.geometry()):
                                        if boitefeature["NOM"][0:3] in ['PEC','BPE']:
                                            intersectboite = "A PEO"
                                        else :
                                            if pt["TYPE_STRUC"] == 'APPUI':
                                                intersectboite = "B PB Appui"
                                            if pt["TYPE_STRUC"] == 'CHAMBRE':
                                                intersectboite = "B PB Chambre"
                            nomaval = nompt
                            proprietaireaval = pt["PROPRIETAI"]
                            if pt["TYPE_STRUC"] == 'APPUI':
                                if proprietaireaval == "ORANGE":
                                    if pt["MODELE"] == "POTL":
                                        typeaval = "P"
                                    else:
                                        typeaval = "A"
                                else :
                                    if pt["MODELE"] == "POTL":
                                        typeaval = "PT"
                                    else:
                                        typeaval = "AT"
                                    nomaval = ""
                                    
                            elif pt["TYPE_STRUC"] == 'CHAMBRE':
                                if proprietaireaval == "ORANGE":
                                    typeaval = "C"
                                else :
                                    typeaval = "CT"
                                    nomaval = ""
                                    
                            elif pt["TYPE_STRUC"] == 'ANCRAGE FACADE':
                                typeaval = "F"
                                nomaval = ""
                                
                            elif pt["TYPE_STRUC"] == 'COLONNE MONTANTE' or pt["TYPE_STRUC"] == 'IMMEUBLE':
                                typeaval = "IMB"
                                nomaval = ""
                                
                            elif pt["TYPE_STRUC"] == 'AUTRE':
                                if pt["MODELE"] == "POTL":
                                    typeaval = "PT"
                                else:
                                    typeaval = "A_VERIFIER"
                                nomaval = ""
                            else :
                                typeaval = "A_VERIFIER"
                                
                            for rechercheTRA in supportlyr.getFeatures():
                                if rechercheTRA.geometry().intersects(pt.geometry()):
                                    if rechercheTRA["NOM"][0:3] == 'TRA':
                                        percementB = 'OUI'
                        
                    if nomamont == None : 
                        nomamont = "INEXISTANT"
                        typeamont = "INEXISTANT"
                    if nomaval == None : 
                        nomaval = "INEXISTANT"
                        typeaval = "INEXISTANT"
                                
                
                    for cable in cablelyr.selectedFeatures():
                        diametre = str(math.ceil(cable["DIAMETRE"] * 2) / 2)
                        if len(diametre) < 3 :
                            diametre = diametre+',0'
                        diametre = diametre.replace('.',',')
                        correspondance1 = typeamont+' '+nomamont+' '+typeaval+' '+nomaval+' '+diametre
                        if proprietaireamont =="ORANGE" or proprietaireaval == "ORANGE" :
                            if typeamont in ['C','CT'] and typeaval in ['C','CT']:
                                alveole = '45'
                            if (typeamont in ['A','AT','F','P','PT'] and typeaval in ['C','CT']) or (typeamont in ['C','CT'] and typeaval in ['A','AT','F','P','PT']):
                                alveole = 'transition'
                            if typeamont in ['A','AT','F','P','PT'] and typeaval in ['A','AT','F','P','PT']:
                                alveole = 'a√©rien'
                            if typeamont == 'IMB' or typeaval == 'IMB':
                                alveole = 'adduction'
                            commentaire = str(cable["SECTION"])+' '+str(cable["CAPACITE"])
                    
                            templyr.removeSelection()
                            feature = QgsFeature()
                            feature.setAttributes([typeamont, nomamont, typeaval, nomaval, lgsupport, alveole, '', '', diametre,commentaire,percementA,percementB, intersectboite])
                            templyr.addFeatures([feature])
                    supportlyr.removeSelection()
                    cablelyr.removeSelection()
                    ptlyr.removeSelection()
            else : 
                QMessageBox.critical(self, "Erreur", 'Des couches sont manquantes')
          
    

    
        if str(self.marche.currentText()) == 'COVAGE':
            checkcable = None
            checksupport = None
            checkpt = None
            checkboite = None
            for layer in QgsProject.instance().mapLayers().values():
                if 'CB RAD' in layer.name():
                    cablelyrbase = layer
                    checkcable = 1
                if 'POL RAD' in layer.name():
                    supportlyr = layer
                    checksupport = 1
                if 'CH RAD' in layer.name():
                    ptlyr = layer
                    checkpt = 1
                if 'BPE RAD' in layer.name():
                    boitelyr = layer
                    checkboite = 1
                    
            if checkcable == 1 and checksupport == 1 and checkpt == 1 and checkboite ==1 :
                supportlyr.removeSelection()
                cablelyrbase.removeSelection()
                ptlyr.removeSelection()
                
                parameters = { 'DISSOLVE' : False,
                    'DISTANCE' : 0.03,
                    'END_CAP_STYLE' : 0,
                    'INPUT' : cablelyrbase,
                    'JOIN_STYLE' : 0,
                    'MITER_LIMIT' : 2,
                    'OUTPUT' : 'TEMPORARY_OUTPUT',
                    'SEGMENTS' : 5 }
                cablelyr = processing.run("native:buffer", parameters)['OUTPUT']
                
                templyr = QgsVectorLayer("None", "C3A", "memory")
                QgsProject.instance().addMapLayer(templyr)
                templyr.dataProvider().addAttributes([QgsField('Type A', QVariant.String),QgsField('Nom A', QVariant.String),QgsField('Type B', QVariant.String),QgsField('Nom B', QVariant.String),QgsField('Longueur tron√ßon', QVariant.String),QgsField('Diametre alveole', QVariant.String),QgsField('Tubage rigide', QVariant.String),QgsField('Diametre tube', QVariant.String),QgsField('Diametre cable', QVariant.String),QgsField('Commentaire', QVariant.String),QgsField('Percement A', QVariant.String),QgsField('Percement B', QVariant.String),QgsField('Boite', QVariant.String)])
                templyr.startEditing()
                
                for support in supportlyr.getFeatures():
                    supportlyr.select(support.id())
                    parameters = { 'INPUT' : cablelyr,
                        'INTERSECT' : QgsProcessingFeatureSourceDefinition(supportlyr.dataProvider().dataSourceUri(),selectedFeaturesOnly=True, featureLimit=-1, geometryCheck=QgsFeatureRequest.GeometryAbortOnInvalid),
                        'METHOD' : 0,
                        'PREDICATE' : [1] }
                    processing.run('qgis:selectbylocation', parameters)
                    parameters = { 'INPUT' : ptlyr, 'INTERSECT' : QgsProcessingFeatureSourceDefinition(supportlyr.dataProvider().dataSourceUri(), selectedFeaturesOnly=True, featureLimit=-1, geometryCheck=QgsFeatureRequest.GeometryAbortOnInvalid),
                    'METHOD' : 0,
                    'PREDICATE' : [0] }
                    processing.run('qgis:selectbylocation', parameters)
                    lgsupport = int(support["LONGUEUR"])
                    
                    nomamont = None
                    proprietaireamont = None
                    typeamont = None
                    nomaval = None
                    proprietaireaval = None
                    typeaval = None
                    intersectboite = None
                    percementA = None
                    percementB = None
                    
                    geom = support.geometry().asMultiPolyline()
                    amont = QgsPoint(geom[0][0])
                    aval = QgsPoint(geom[-1][-1])
                    for pt in ptlyr.getFeatures():
                        ptgeom = QgsPoint(pt.geometry().asPoint())
                        if ptgeom == amont:
                            for boitefeature in boitelyr.getFeatures():
                                if boitefeature.geometry().intersects(pt.geometry()):
                                    if boitefeature["TYPE_FONC"] != 'PBO':
                                        intersectboite = "A PEO"
                                    else :
                                        if pt["TYPE_STRUC"] == 'POTEAU':
                                            intersectboite = "A PB Appui"
                                        if pt["TYPE_STRUC"] == 'CHAMBRE':
                                            intersectboite = "A PB Chambre"
                            nomamont = pt["REF_PROP"]
                            proprietaireamont = pt["PROPRIO"]
                            if pt["TYPE_STRUC"] == 'POTEAU':
                                if proprietaireamont == "ORANGE":
                                    typeamont = "A"
                                else :
                                    typeamont = "AT"
                                    nomamont = ""
                                    
                            elif pt["TYPE_STRUC"] == 'CHAMBRE':
                                if proprietaireamont == "ORANGE":
                                    typeamont = "C"
                                else :
                                    typeamont = "CT"
                                    nomamont = ""
                                    
                            elif pt["TYPE_STRUC"] == 'FACADE':
                                typeamont = "F"
                                nomamont = ""
                                
                            elif pt["TYPE_STRUC"] == 'POTELET':
                                if proprietaireamont == "ORANGE":
                                    typeamont = "P"
                                else :
                                    typeamont = "PT"
                                    nomamont = ""
                                    
                            elif pt["TYPE_STRUC"] == 'IMMEUBLE':
                                typeamont = "IMB"
                                nomamont = ""
                                
                            for rechercheTRA in supportlyr.getFeatures():
                                if rechercheTRA.geometry().intersects(pt.geometry()):
                                    if rechercheTRA["TYPE_INFRA"] == 'FOURREAUX' and rechercheTRA["CONTRAT"] == "CONSTRUCTION":
                                        percementA = 'OUI'

                        elif ptgeom == aval:
                            if intersectboite == None:
                                for boitefeature in boitelyr.getFeatures():
                                    if boitefeature.geometry().intersects(pt.geometry()):
                                        if boitefeature["TYPE_FONC"] != 'PBO':
                                            intersectboite = "B PEO"
                                        else :
                                            if pt["TYPE_STRUC"] == 'POTEAU':
                                                intersectboite = "B PB Appui"
                                            if pt["TYPE_STRUC"] == 'CHAMBRE':
                                                intersectboite = "B PB Chambre"
                            nomaval = pt["REF_PROP"]
                            proprietaireaval = pt["PROPRIO"]
                            if pt["TYPE_STRUC"] == 'POTEAU':
                                if proprietaireaval == "ORANGE":
                                    typeaval = "A"
                                else :
                                    typeaval = "AT"
                                    nomaval = ""
                                    
                            elif pt["TYPE_STRUC"] == 'CHAMBRE':
                                if proprietaireaval == "ORANGE":
                                    typeaval = "C"
                                else :
                                    typeaval = "CT"
                                    nomaval = ""
                                    
                            elif pt["TYPE_STRUC"] == 'FACADE':
                                typeaval = "F"
                                nomaval = ""
                                
                            elif pt["TYPE_STRUC"] == 'POTELET':
                                if proprietaireaval == "ORANGE":
                                    typeaval = "P"
                                else :
                                    typeaval = "PT"
                                    nomaval = ""
                                    
                            elif pt["TYPE_STRUC"] == 'IMMEUBLE':
                                typeaval = "IMB"
                                nomaval = ""
                                
                            for rechercheTRA in supportlyr.getFeatures():
                                if rechercheTRA.geometry().intersects(pt.geometry()):
                                    if rechercheTRA["TYPE_INFRA"] == 'FOURREAUX' and rechercheTRA["CONTRAT"] == "CONSTRUCTION":
                                        percementB = 'OUI'
                        
                    if nomamont == None : 
                        nomamont = "PB ACCROCHAGE SUPPORT"
                        typeamont = "PB ACCROCHAGE SUPPORT"
                    if nomaval == None : 
                        nomaval = "PB ACCROCHAGE SUPPORT"
                        typeaval = "PB ACCROCHAGE SUPPORT"
                                
                
                    for cable in cablelyr.selectedFeatures():
                        diametre='0'
                        if cable["CAPACITE"] == 12 and cable["MODE_POSE"] == 'SOUTERRAIN' :
                            diametre = '6,0'
                        if cable["CAPACITE"] == 24 and cable["MODE_POSE"] == 'SOUTERRAIN' :
                            diametre = '8,5'
                        if cable["CAPACITE"] == 36 and cable["MODE_POSE"] == 'SOUTERRAIN' :
                            diametre = '8,5'
                        if cable["CAPACITE"] == 48 and cable["MODE_POSE"] == 'SOUTERRAIN' :
                            diametre = '8,5'
                        if cable["CAPACITE"] == 72 and cable["MODE_POSE"] == 'SOUTERRAIN' :
                            diametre = '10,0'
                        if cable["CAPACITE"] == 96 and cable["MODE_POSE"] == 'SOUTERRAIN' :
                            diametre = '12,0'
                        if cable["CAPACITE"] == 144 and cable["MODE_POSE"] == 'SOUTERRAIN' :
                            diametre = '12,0'
                        if cable["CAPACITE"] == 288 and cable["MODE_POSE"] == 'SOUTERRAIN' :
                            diametre = '13,0'
                        if cable["CAPACITE"] == 432 and cable["MODE_POSE"] == 'SOUTERRAIN' :
                            diametre = '16,5'
                        if cable["CAPACITE"] == 576 and cable["MODE_POSE"] == 'SOUTERRAIN' :
                            diametre = '18,0'
                        if cable["CAPACITE"] == 720 and cable["MODE_POSE"] == 'SOUTERRAIN' :
                            diametre = '18,5'
                        if cable["CAPACITE"] == 864 and cable["MODE_POSE"] == 'SOUTERRAIN' :
                            diametre = '19,5'
                        if cable["CAPACITE"] == 12 and cable["MODE_POSE"] == 'AERIEN' :
                            diametre = '6,0'
                        if cable["CAPACITE"] == 24 and cable["MODE_POSE"] == 'AERIEN' :
                            diametre = '8,5'
                        if cable["CAPACITE"] == 36 and cable["MODE_POSE"] == 'AERIEN' :
                            diametre = '8,5'
                        if cable["CAPACITE"] == 48 and cable["MODE_POSE"] == 'AERIEN' :
                            diametre = '9,5'
                        if cable["CAPACITE"] == 72 and cable["MODE_POSE"] == 'AERIEN' :
                            diametre = '10,5'
                        if cable["CAPACITE"] == 96 and cable["MODE_POSE"] == 'AERIEN' :
                            diametre = '11,5'
                        if cable["CAPACITE"] == 144 and cable["MODE_POSE"] == 'AERIEN' :
                            diametre = '11,5'
                        diametre = diametre.replace('.',',')
                        correspondance1 = typeamont+' '+nomamont+' '+typeaval+' '+nomaval+' '+diametre
                        if proprietaireamont =="ORANGE" or proprietaireaval == "ORANGE" :
                            alveole = 'ERREUR'
                            if typeamont in ['C','CT'] and typeaval in ['C','CT']:
                                alveole = '45'
                            if (typeamont in ['A','AT','F','P','PT'] and typeaval in ['C','CT']) or (typeamont in ['C','CT'] and typeaval in ['A','AT','F','P','PT']):
                                alveole = 'transition'
                            if typeamont in ['A','AT','F','P','PT'] and typeaval in ['A','AT','F','P','PT']:
                                alveole = 'a√©rien'
                            if typeamont == 'IMB' or typeaval == 'IMB':
                                alveole = 'adduction'
                            commentaire = str(cable["SECTION"])+' '+str(cable["CAPACITE"])
                    
                            templyr.removeSelection()
                            feature = QgsFeature()
                            feature.setAttributes([typeamont, nomamont, typeaval, nomaval, lgsupport, alveole, '', '', diametre,commentaire,percementA,percementB, intersectboite])
                            templyr.addFeatures([feature])

                    supportlyr.removeSelection()
                    cablelyr.removeSelection()
                    ptlyr.removeSelection()
            else : 
                QMessageBox.critical(self, "Erreur", 'Des couches sont manquantes')
    #--------------------------------------------------------------------------
    
    def copyNewFile(self):
        def resolve(name, basepath=None):
            if not basepath:
                basepath = os.path.dirname(os.path.realpath(__file__))
            return os.path.join(basepath, name)
        path = resolve('COMPARAISON C3B.csv')
        desktop = os.path.join(os.path.join(os.environ['USERPROFILE']), 'Desktop')
        shutil.copy(path, desktop)
        QMessageBox.information(self, "Fichier cr√©√©", 'Le fichier COMPARAISON C3B a bien √©t√© cr√©√© sur le bureau')
    
    #--------------------------------------------------------------------------
    
    def comparaisonC3B(self):
        if str(self.marche.currentText()) == 'ALTITUDE': 
            code_style='<!DOCTYPE qgis PUBLIC \'http://mrcc.com/qgis.dtd\' \'SYSTEM\'><qgis styleCategories="AllStyleCategories" version="3.22.4-Bia≈Çowie≈ºa" readOnly="0" maxScale="0" minScale="1e+08" hasScaleBasedVisibilityFlag="0"><flags><Identifiable>1</Identifiable><Removable>1</Removable><Searchable>1</Searchable><Private>0</Private></flags><temporal endField="" startField="" durationField="" limitMode="0" startExpression="" endExpression="" accumulate="0" durationUnit="min" fixedDuration="0" mode="0" enabled="0"><fixedRange><start></start><end></end></fixedRange></temporal><customproperties><Option type="Map"><Option name="dualview/previewExpressions" type="List"><Option type="QString" value="&quot;nomamont&quot;"/></Option><Option name="embeddedWidgets/count" type="int" value="0"/><Option name="variableNames"/><Option name="variableValues"/></Option></customproperties><geometryOptions removeDuplicateNodes="0" geometryPrecision="0"><activeChecks/><checkConfiguration/></geometryOptions><legend type="default-vector" showLabelLegend="0"/><referencedLayers/><fieldConfiguration><field name="id" configurationFlags="None"><editWidget type="Range"><config><Option/></config></editWidget></field><field name="typeamont" configurationFlags="None"><editWidget type="TextEdit"><config><Option/></config></editWidget></field><field name="nomamont" configurationFlags="None"><editWidget type="TextEdit"><config><Option/></config></editWidget></field><field name="typeaval" configurationFlags="None"><editWidget type="TextEdit"><config><Option/></config></editWidget></field><field name="nomaval" configurationFlags="None"><editWidget type="TextEdit"><config><Option/></config></editWidget></field><field name="diametre" configurationFlags="None"><editWidget type="TextEdit"><config><Option/></config></editWidget></field><field name="correspondance" configurationFlags="None"><editWidget type="TextEdit"><config><Option/></config></editWidget></field><field name="etat" configurationFlags="None"><editWidget type="TextEdit"><config><Option/></config></editWidget></field></fieldConfiguration><aliases><alias name="" index="0" field="id"/><alias name="" index="1" field="typeamont"/><alias name="" index="2" field="nomamont"/><alias name="" index="3" field="typeaval"/><alias name="" index="4" field="nomaval"/><alias name="" index="5" field="diametre"/><alias name="" index="6" field="correspondance"/><alias name="" index="7" field="etat"/></aliases><defaults><default expression="" field="id" applyOnUpdate="0"/><default expression="" field="typeamont" applyOnUpdate="0"/><default expression="" field="nomamont" applyOnUpdate="0"/><default expression="" field="typeaval" applyOnUpdate="0"/><default expression="" field="nomaval" applyOnUpdate="0"/><default expression="" field="diametre" applyOnUpdate="0"/><default expression="" field="correspondance" applyOnUpdate="0"/><default expression="" field="etat" applyOnUpdate="0"/></defaults><constraints><constraint exp_strength="0" notnull_strength="0" unique_strength="0" field="id" constraints="0"/><constraint exp_strength="0" notnull_strength="0" unique_strength="0" field="typeamont" constraints="0"/><constraint exp_strength="0" notnull_strength="0" unique_strength="0" field="nomamont" constraints="0"/><constraint exp_strength="0" notnull_strength="0" unique_strength="0" field="typeaval" constraints="0"/><constraint exp_strength="0" notnull_strength="0" unique_strength="0" field="nomaval" constraints="0"/><constraint exp_strength="0" notnull_strength="0" unique_strength="0" field="diametre" constraints="0"/><constraint exp_strength="0" notnull_strength="0" unique_strength="0" field="correspondance" constraints="0"/><constraint exp_strength="0" notnull_strength="0" unique_strength="0" field="etat" constraints="0"/></constraints><constraintExpressions><constraint exp="" desc="" field="id"/><constraint exp="" desc="" field="typeamont"/><constraint exp="" desc="" field="nomamont"/><constraint exp="" desc="" field="typeaval"/><constraint exp="" desc="" field="nomaval"/><constraint exp="" desc="" field="diametre"/><constraint exp="" desc="" field="correspondance"/><constraint exp="" desc="" field="etat"/></constraintExpressions><expressionfields/><attributeactions><defaultAction key="Canvas" value="{00000000-0000-0000-0000-000000000000}"/></attributeactions><attributetableconfig actionWidgetStyle="dropDown" sortOrder="0" sortExpression="&quot;id&quot;"><columns><column hidden="0" width="-1" name="id" type="field"/><column hidden="0" width="-1" name="typeamont" type="field"/><column hidden="0" width="-1" name="nomamont" type="field"/><column hidden="0" width="-1" name="typeaval" type="field"/><column hidden="0" width="100" name="nomaval" type="field"/><column hidden="0" width="101" name="diametre" type="field"/><column hidden="0" width="213" name="correspondance" type="field"/><column hidden="0" width="213" name="etat" type="field"/><column hidden="1" width="-1" type="actions"/></columns></attributetableconfig><conditionalstyles><rowstyles><style rule="etat LIKE \'%MANQUANT%\'" background_color="#fb9a99" name="" background_color_alpha="128"><font description="MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0" style=""/></style><style rule="etat LIKE \'%NON POSE%\'" background_color="#fbc14e" name="" background_color_alpha="128"><font description="MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0" style=""/></style><style rule="etat = \'OK\'" background_color="#9ad871" name="" background_color_alpha="128"><font description="MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0" style=""/></style><style rule="etat LIKE \'%CHANGER LE DIAMETRE POUR%\'" background_color="#71b6d8" name="" background_color_alpha="128"><font description="MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0" style=""/></style></rowstyles><fieldstyles><fieldstyle fieldname="etat"/><fieldstyle fieldname="diametre"><style rule="etat LIKE \'%MAUVAIS DIAMETRE%\'" name=""><font description="MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0" style=""/><symbol alpha="1" name="icon" type="marker" clip_to_extent="1" force_rhr="0"><data_defined_properties><Option type="Map"><Option name="name" type="QString" value=""/><Option name="properties"/><Option name="type" type="QString" value="collection"/></Option></data_defined_properties><layer class="SimpleMarker" enabled="1" pass="0" locked="0"><Option type="Map"><Option name="angle" type="QString" value="0"/><Option name="cap_style" type="QString" value="square"/><Option name="color" type="QString" value="255,255,255,255"/><Option name="horizontal_anchor_point" type="QString" value="1"/><Option name="joinstyle" type="QString" value="bevel"/><Option name="name" type="QString" value="circle"/><Option name="offset" type="QString" value="0,0"/><Option name="offset_map_unit_scale" type="QString" value="3x:0,0,0,0,0,0"/><Option name="offset_unit" type="QString" value="MM"/><Option name="outline_color" type="QString" value="0,0,0,255"/><Option name="outline_style" type="QString" value="solid"/><Option name="outline_width" type="QString" value="0.4"/><Option name="outline_width_map_unit_scale" type="QString" value="3x:0,0,0,0,0,0"/><Option name="outline_width_unit" type="QString" value="MM"/><Option name="scale_method" type="QString" value="diameter"/><Option name="size" type="QString" value="4"/><Option name="size_map_unit_scale" type="QString" value="3x:0,0,0,0,0,0"/><Option name="size_unit" type="QString" value="MM"/><Option name="vertical_anchor_point" type="QString" value="1"/></Option><prop k="angle" v="0"/><prop k="cap_style" v="square"/><prop k="color" v="255,255,255,255"/><prop k="horizontal_anchor_point" v="1"/><prop k="joinstyle" v="bevel"/><prop k="name" v="circle"/><prop k="offset" v="0,0"/><prop k="offset_map_unit_scale" v="3x:0,0,0,0,0,0"/><prop k="offset_unit" v="MM"/><prop k="outline_color" v="0,0,0,255"/><prop k="outline_style" v="solid"/><prop k="outline_width" v="0.4"/><prop k="outline_width_map_unit_scale" v="3x:0,0,0,0,0,0"/><prop k="outline_width_unit" v="MM"/><prop k="scale_method" v="diameter"/><prop k="size" v="4"/><prop k="size_map_unit_scale" v="3x:0,0,0,0,0,0"/><prop k="size_unit" v="MM"/><prop k="vertical_anchor_point" v="1"/><data_defined_properties><Option type="Map"><Option name="name" type="QString" value=""/><Option name="properties"/><Option name="type" type="QString" value="collection"/></Option></data_defined_properties></layer></symbol></style></fieldstyle></fieldstyles></conditionalstyles><storedexpressions/><editform tolerant="1"></editform><editforminit/><editforminitcodesource>0</editforminitcodesource><editforminitfilepath></editforminitfilepath><editforminitcode><![CDATA[# -*- coding: utf-8 -*-"""Les formulaires QGIS peuvent avoir une fonction Python qui sera appel√©e √† l\'ouverture du formulaire.Utilisez cette fonction pour ajouter plus de fonctionnalit√©s √† vos formulaires.Entrez le nom de la fonction dans le champ "Fonction d\'initialisation Python".Voici un exemple √† suivre:"""from qgis.PyQt.QtWidgets import QWidgetdef my_form_open(dialog, layer, feature):	geom = feature.geometry()	control = dialog.findChild(QWidget, "MyLineEdit")]]></editforminitcode><featformsuppress>0</featformsuppress><editorlayout>generatedlayout</editorlayout><editable><field editable="1" name="correspondance"/><field editable="1" name="diametre"/><field editable="1" name="etat"/><field editable="1" name="id"/><field editable="1" name="nomamont"/><field editable="1" name="nomaval"/><field editable="1" name="typeamont"/><field editable="1" name="typeaval"/></editable><labelOnTop><field name="correspondance" labelOnTop="0"/><field name="diametre" labelOnTop="0"/><field name="etat" labelOnTop="0"/><field name="id" labelOnTop="0"/><field name="nomamont" labelOnTop="0"/><field name="nomaval" labelOnTop="0"/><field name="typeamont" labelOnTop="0"/><field name="typeaval" labelOnTop="0"/></labelOnTop><reuseLastValue><field name="correspondance" reuseLastValue="0"/><field name="diametre" reuseLastValue="0"/><field name="etat" reuseLastValue="0"/><field name="id" reuseLastValue="0"/><field name="nomamont" reuseLastValue="0"/><field name="nomaval" reuseLastValue="0"/><field name="typeamont" reuseLastValue="0"/><field name="typeaval" reuseLastValue="0"/></reuseLastValue><dataDefinedFieldProperties/><widgets/><previewExpression>"nomamont"</previewExpression><mapTip></mapTip><layerGeometryType>4</layerGeometryType></qgis>'
            
            checkcable = None
            checksupport = None
            checkpt = None
            checkcomparaison = None
            for layer in QgsProject.instance().mapLayers().values():
                if 'cable_optique' in layer.name():
                    cablelyrbase = layer
                    checkcable=1
                if 'support' in layer.name():
                    supportlyr = layer
                    checksupport=1
                if 'point_technique' in layer.name():
                    ptlyr = layer
                    checkpt=1
                if 'COMPARAISON C3B' in layer.name():
                    comparaisonc3b = layer
                    checkcomparaison=1
                    
            if checkcable == 1 and checksupport == 1 and checkpt ==1 and checkcomparaison ==1 :
                supportlyr.removeSelection()
                cablelyrbase.removeSelection()
                ptlyr.removeSelection()
                
                field = QgsField('id', QVariant.LongLong)
                comparaisonc3b.startEditing()
                comparaisonc3b.addExpressionField('$id+14', field)
                
                parameters = { 'DISSOLVE' : False,
                    'DISTANCE' : 0.03,
                    'END_CAP_STYLE' : 0,
                    'INPUT' : cablelyrbase,
                    'JOIN_STYLE' : 0,
                    'MITER_LIMIT' : 2,
                    'OUTPUT' : 'TEMPORARY_OUTPUT',
                    'SEGMENTS' : 5 }
                cablelyr = processing.run("native:buffer", parameters)['OUTPUT']
                
                maxid = comparaisonc3b.fields().indexFromName('id')
                id = comparaisonc3b.maximumValue(maxid)
                
                
                templyr = QgsVectorLayer("None", "Resultat", "memory")
                QgsProject.instance().addMapLayer(templyr)
                templyr.dataProvider().addAttributes([QgsField('id', QVariant.Int),QgsField('typeamont', QVariant.String),QgsField('nomamont', QVariant.String),QgsField('typeaval', QVariant.String),QgsField('nomaval', QVariant.String),QgsField('diametre', QVariant.String),QgsField('etat', QVariant.String)])
                comparaisonc3b.selectAll()
                iface.copySelectionToClipboard(comparaisonc3b)
                templyr.startEditing()
                iface.pasteFromClipboard(templyr)

                idfield = templyr.fields().indexOf('id')
                typeamontfield = templyr.fields().indexOf('typeamont')
                nomamontfield = templyr.fields().indexOf('nomamont')
                typeavalfield = templyr.fields().indexOf('typeaval')
                nomamontfield = templyr.fields().indexOf('nomamont')
                diametrefield = templyr.fields().indexOf('diametre')
                etatfield = templyr.fields().indexOf('etat')
                
                for lignec3b in templyr.getFeatures():
                    templyr.changeAttributeValue(lignec3b.id(), diametrefield, lignec3b["diametre"].replace('.',','))
                

                for support in supportlyr.getFeatures():
                    supportlyr.select(support.id())
                    parameters = { 'INPUT' : cablelyr,
                        'INTERSECT' : QgsProcessingFeatureSourceDefinition(supportlyr.dataProvider().dataSourceUri(),selectedFeaturesOnly=True, featureLimit=-1, geometryCheck=QgsFeatureRequest.GeometryAbortOnInvalid),
                        'METHOD' : 0,
                        'PREDICATE' : [1] }
                    processing.run('qgis:selectbylocation', parameters)
                    parameters = { 'INPUT' : ptlyr, 'INTERSECT' : QgsProcessingFeatureSourceDefinition(supportlyr.dataProvider().dataSourceUri(), selectedFeaturesOnly=True, featureLimit=-1, geometryCheck=QgsFeatureRequest.GeometryAbortOnInvalid),
                    'METHOD' : 0,
                    'PREDICATE' : [0] }
                    processing.run('qgis:selectbylocation', parameters)
                    amont = support["AMONT"]

                    while '/0' in amont:
                        amont = amont.replace('/0','/')
                    nomamont = None
                    proprietaireamont = None
                    typeamont = None
                    aval = support["AVAL"]

                    while '/0' in aval:
                        aval = aval.replace('/0','/')
                    nomaval = None
                    proprietaireaval = None
                    typeaval = None
                    for pt in ptlyr.getFeatures():

                        nompt = str(pt["NOM"])

                        while '/0' in nompt:
                            nompt = nompt.replace('/0','/')
                        if nompt == amont :
                            nomamont = nompt
                            proprietaireamont = pt["PROPRIETAI"]
                            if pt["TYPE_STRUC"] == 'APPUI':
                                if proprietaireamont == "ORANGE":
                                    if pt["MODELE"] == "POTL":
                                        typeamont = "P"
                                    else:
                                        typeamont = "A"
                                else :
                                    if pt["MODELE"] == "POTL":
                                        typeamont = "PT"
                                    else:
                                        typeamont = "AT"
                                    nomamont = ""
                                    
                            elif pt["TYPE_STRUC"] == 'CHAMBRE':
                                if proprietaireamont == "ORANGE":
                                    typeamont = "C"
                                else :
                                    typeamont = "CT"
                                    nomamont = ""
                                    
                            elif pt["TYPE_STRUC"] == 'ANCRAGE FACADE':
                                typeamont = "F"
                                nomamont = ""
                                
                            elif pt["TYPE_STRUC"] == 'COLONNE MONTANTE' or pt["TYPE_STRUC"] == 'IMMEUBLE':
                                typeamont = "IMB"
                                nomamont = ""
                                
                            elif pt["TYPE_STRUC"] == 'AUTRE':
                                if pt["MODELE"] == "POTL":
                                    typeamont = "PT"
                                else:
                                    typeamont = "A_VERIFIER"
                                nomamont = ""
                            else :
                                typeaval = "A_VERIFIER"

                        elif nompt == aval :
                            nomaval = nompt
                            proprietaireaval = pt["PROPRIETAI"]
                            if pt["TYPE_STRUC"] == 'APPUI':
                                if proprietaireaval == "ORANGE":
                                    if pt["MODELE"] == "POTL":
                                        typeaval = "P"
                                    else:
                                        typeaval = "A"
                                else :
                                    if pt["MODELE"] == "POTL":
                                        typeaval = "PT"
                                    else:
                                        typeaval = "AT"
                                    nomaval = ""
                                    
                            elif pt["TYPE_STRUC"] == 'CHAMBRE':
                                if proprietaireaval == "ORANGE":
                                    typeaval = "C"
                                else :
                                    typeaval = "CT"
                                    nomaval = ""
                                    
                            elif pt["TYPE_STRUC"] == 'ANCRAGE FACADE':
                                typeaval = "F"
                                nomaval = ""
                                
                            elif pt["TYPE_STRUC"] == 'COLONNE MONTANTE' or pt["TYPE_STRUC"] == 'IMMEUBLE':
                                typeaval = "IMB"
                                nomaval = ""
                                
                            elif pt["TYPE_STRUC"] == 'AUTRE':
                                if pt["MODELE"] == "POTL":
                                    typeaval = "PT"
                                else:
                                    typeaval = "A_VERIFIER"
                                nomaval = ""
                            else :
                                typeaval = "A_VERIFIER"
                        
                    if nomamont == None : 
                        nomamont = "INEXISTANT"
                        typeamont = "INEXISTANT"
                    if nomaval == None : 
                        nomaval = "INEXISTANT"
                        typeaval = "INEXISTANT"
                                
                                
                    for cable in cablelyr.selectedFeatures():
                        xid = 0
                        diametre = str(math.ceil(cable["DIAMETRE"] * 2) / 2)
                        if len(diametre) < 3 :
                            diametre = diametre+',0'
                        diametre = diametre.replace('.',',')
                        correspondance1 = typeamont+' '+nomamont+' '+typeaval+' '+nomaval+' '+diametre
                        if proprietaireamont =="ORANGE" or proprietaireaval == "ORANGE" :
                                templyr.removeSelection()
                                feature = QgsFeature()
                                feature.setAttributes([xid, typeamont, nomamont, typeaval, nomaval, diametre, "MANQUANT"])
                                templyr.addFeatures([feature])

                    supportlyr.removeSelection()
                    cablelyr.removeSelection()
                    ptlyr.removeSelection()
                    

                for lignec3b in templyr.getFeatures():
                    correspondanceok = 'NOK'
                    if lignec3b["etat"] == qgis.core.NULL:
                        correspondance = lignec3b['typeamont']+' '+lignec3b['nomamont']+' '+lignec3b['typeaval']+' '+lignec3b['nomaval']+' '+lignec3b['diametre']
                        for checkcorrepondance in templyr.getFeatures():
                            correspondance1 = checkcorrepondance['typeamont']+' '+checkcorrepondance['nomamont']+' '+checkcorrepondance['typeaval']+' '+checkcorrepondance['nomaval']+' '+checkcorrepondance['diametre']
                            correspondance2 = checkcorrepondance['typeaval']+' '+checkcorrepondance['nomaval']+' '+checkcorrepondance['typeamont']+' '+checkcorrepondance['nomamont']+' '+checkcorrepondance['diametre']
                            if correspondance == correspondance1 and checkcorrepondance["etat"] == "MANQUANT":
                                if correspondanceok == 'NOK':
                                    templyr.changeAttributeValue(lignec3b.id(), etatfield, 'OK')
                                correspondanceok = 'OK'
                                templyr.deleteFeature(checkcorrepondance.id())
                            elif correspondance == correspondance2 and checkcorrepondance["etat"] == "MANQUANT":
                                if correspondanceok == 'NOK':
                                    templyr.changeAttributeValue(lignec3b.id(), etatfield, 'OK')
                                correspondanceok = 'OK'
                                templyr.deleteFeature(checkcorrepondance.id())
                            else :
                                nomamont = str(checkcorrepondance["nomamont"])
                                nomaval = str(checkcorrepondance["nomaval"])
                                correspondance3 = checkcorrepondance['typeamont']+' '+nomamont+' '+checkcorrepondance['typeaval']+' '+nomaval+' '+checkcorrepondance['diametre']
                                correspondance4 = checkcorrepondance['typeaval']+' '+nomaval+' '+nomamont+' '+checkcorrepondance['nomamont']+' '+checkcorrepondance['diametre']
                                if correspondance == correspondance3 and checkcorrepondance["etat"] == "MANQUANT":
                                    if correspondanceok == 'NOK':
                                        templyr.changeAttributeValue(lignec3b.id(), etatfield, 'OK')
                                    correspondanceok = 'OK'
                                    templyr.deleteFeature(checkcorrepondance.id())
                                elif correspondance == correspondance4 and checkcorrepondance["etat"] == "MANQUANT":
                                    if correspondanceok == 'NOK':
                                        templyr.changeAttributeValue(lignec3b.id(), etatfield, 'OK')
                                    correspondanceok = 'OK'
                                    templyr.deleteFeature(checkcorrepondance.id())



                        
                for lignec3b in templyr.getFeatures():
                    if lignec3b["etat"] == "MANQUANT":
                        changementdiametre = 0
                        ligne1 = lignec3b["typeamont"]+' '+lignec3b["nomamont"]+' '+lignec3b["typeaval"]+' '+lignec3b["nomaval"]
                        for comparaisonc3b in templyr.getFeatures():
                            comparaison1 = comparaisonc3b["typeamont"]+' '+comparaisonc3b["nomamont"]+' '+comparaisonc3b["typeaval"]+' '+comparaisonc3b["nomaval"]
                            comparaison2 = comparaisonc3b["typeaval"]+' '+comparaisonc3b["nomaval"]+' '+comparaisonc3b["typeamont"]+' '+comparaisonc3b["nomamont"]
                            if ligne1 == comparaison1 and comparaisonc3b["etat"] == qgis.core.NULL :
                                bondiametre = lignec3b["diametre"]
                                templyr.deleteFeature(lignec3b.id())
                                if changementdiametre == 0:
                                    templyr.changeAttributeValue(comparaisonc3b.id(), etatfield, "CHANGER LE DIAMETRE POUR "+bondiametre)
                                changementdiametre = 1
                            elif ligne1 == comparaison2 and comparaisonc3b["etat"] == qgis.core.NULL :
                                bondiametre = lignec3b["diametre"]
                                templyr.deleteFeature(lignec3b.id())
                                if changementdiametre == 0:
                                    templyr.changeAttributeValue(comparaisonc3b.id(), etatfield, "CHANGER LE DIAMETRE POUR "+bondiametre)
                                changementdiametre = 1
                            else :
                                nomamont = checkcorrepondance["nomamont"]
                                nomaval = checkcorrepondance["nomaval"]

                                comparaison1 = comparaisonc3b["typeamont"]+' '+nomamont+' '+comparaisonc3b["typeaval"]+' '+nomaval
                                comparaison2 = comparaisonc3b["typeaval"]+' '+nomaval+' '+nomamont+' '+comparaisonc3b["nomamont"]
                                if ligne1 == comparaison1 and comparaisonc3b["etat"] == qgis.core.NULL :
                                    bondiametre = lignec3b["diametre"]
                                    templyr.deleteFeature(lignec3b.id())
                                    if changementdiametre == 0:
                                        templyr.changeAttributeValue(comparaisonc3b.id(), etatfield, "CHANGER LE DIAMETRE POUR "+bondiametre)
                                    changementdiametre = 1
                                elif ligne1 == comparaison2 and comparaisonc3b["etat"] == qgis.core.NULL :
                                    bondiametre = lignec3b["diametre"]
                                    templyr.deleteFeature(lignec3b.id())
                                    if changementdiametre == 0:
                                        templyr.changeAttributeValue(comparaisonc3b.id(), etatfield, "CHANGER LE DIAMETRE POUR "+bondiametre)
                                    changementdiametre = 1
                    
                for lignec3b in templyr.getFeatures():
                    if lignec3b["etat"] == qgis.core.NULL:
                        templyr.changeAttributeValue(lignec3b.id(), etatfield, 'NON POSE')
                    if lignec3b["etat"] == "MANQUANT":
                        id+=1
                        templyr.changeAttributeValue(lignec3b.id(), idfield, id)
                        

                docXml = QDomDocument()
                docXml.setContent(code_style)
                templyr.importNamedStyle(docXml)
                templyr.triggerRepaint()
                templyr.commitChanges()
            
            else :
                QMessageBox.critical(self, "Erreur", 'Des couches sont manquantes')
                
                
                
                
                
                
        if str(self.marche.currentText()) == 'COVAGE': 
            code_style='<!DOCTYPE qgis PUBLIC \'http://mrcc.com/qgis.dtd\' \'SYSTEM\'><qgis styleCategories="AllStyleCategories" version="3.22.4-Bia≈Çowie≈ºa" readOnly="0" maxScale="0" minScale="1e+08" hasScaleBasedVisibilityFlag="0"><flags><Identifiable>1</Identifiable><Removable>1</Removable><Searchable>1</Searchable><Private>0</Private></flags><temporal endField="" startField="" durationField="" limitMode="0" startExpression="" endExpression="" accumulate="0" durationUnit="min" fixedDuration="0" mode="0" enabled="0"><fixedRange><start></start><end></end></fixedRange></temporal><customproperties><Option type="Map"><Option name="dualview/previewExpressions" type="List"><Option type="QString" value="&quot;nomamont&quot;"/></Option><Option name="embeddedWidgets/count" type="int" value="0"/><Option name="variableNames"/><Option name="variableValues"/></Option></customproperties><geometryOptions removeDuplicateNodes="0" geometryPrecision="0"><activeChecks/><checkConfiguration/></geometryOptions><legend type="default-vector" showLabelLegend="0"/><referencedLayers/><fieldConfiguration><field name="id" configurationFlags="None"><editWidget type="Range"><config><Option/></config></editWidget></field><field name="typeamont" configurationFlags="None"><editWidget type="TextEdit"><config><Option/></config></editWidget></field><field name="nomamont" configurationFlags="None"><editWidget type="TextEdit"><config><Option/></config></editWidget></field><field name="typeaval" configurationFlags="None"><editWidget type="TextEdit"><config><Option/></config></editWidget></field><field name="nomaval" configurationFlags="None"><editWidget type="TextEdit"><config><Option/></config></editWidget></field><field name="diametre" configurationFlags="None"><editWidget type="TextEdit"><config><Option/></config></editWidget></field><field name="correspondance" configurationFlags="None"><editWidget type="TextEdit"><config><Option/></config></editWidget></field><field name="etat" configurationFlags="None"><editWidget type="TextEdit"><config><Option/></config></editWidget></field></fieldConfiguration><aliases><alias name="" index="0" field="id"/><alias name="" index="1" field="typeamont"/><alias name="" index="2" field="nomamont"/><alias name="" index="3" field="typeaval"/><alias name="" index="4" field="nomaval"/><alias name="" index="5" field="diametre"/><alias name="" index="6" field="correspondance"/><alias name="" index="7" field="etat"/></aliases><defaults><default expression="" field="id" applyOnUpdate="0"/><default expression="" field="typeamont" applyOnUpdate="0"/><default expression="" field="nomamont" applyOnUpdate="0"/><default expression="" field="typeaval" applyOnUpdate="0"/><default expression="" field="nomaval" applyOnUpdate="0"/><default expression="" field="diametre" applyOnUpdate="0"/><default expression="" field="correspondance" applyOnUpdate="0"/><default expression="" field="etat" applyOnUpdate="0"/></defaults><constraints><constraint exp_strength="0" notnull_strength="0" unique_strength="0" field="id" constraints="0"/><constraint exp_strength="0" notnull_strength="0" unique_strength="0" field="typeamont" constraints="0"/><constraint exp_strength="0" notnull_strength="0" unique_strength="0" field="nomamont" constraints="0"/><constraint exp_strength="0" notnull_strength="0" unique_strength="0" field="typeaval" constraints="0"/><constraint exp_strength="0" notnull_strength="0" unique_strength="0" field="nomaval" constraints="0"/><constraint exp_strength="0" notnull_strength="0" unique_strength="0" field="diametre" constraints="0"/><constraint exp_strength="0" notnull_strength="0" unique_strength="0" field="correspondance" constraints="0"/><constraint exp_strength="0" notnull_strength="0" unique_strength="0" field="etat" constraints="0"/></constraints><constraintExpressions><constraint exp="" desc="" field="id"/><constraint exp="" desc="" field="typeamont"/><constraint exp="" desc="" field="nomamont"/><constraint exp="" desc="" field="typeaval"/><constraint exp="" desc="" field="nomaval"/><constraint exp="" desc="" field="diametre"/><constraint exp="" desc="" field="correspondance"/><constraint exp="" desc="" field="etat"/></constraintExpressions><expressionfields/><attributeactions><defaultAction key="Canvas" value="{00000000-0000-0000-0000-000000000000}"/></attributeactions><attributetableconfig actionWidgetStyle="dropDown" sortOrder="0" sortExpression="&quot;id&quot;"><columns><column hidden="0" width="-1" name="id" type="field"/><column hidden="0" width="-1" name="typeamont" type="field"/><column hidden="0" width="-1" name="nomamont" type="field"/><column hidden="0" width="-1" name="typeaval" type="field"/><column hidden="0" width="100" name="nomaval" type="field"/><column hidden="0" width="101" name="diametre" type="field"/><column hidden="0" width="213" name="correspondance" type="field"/><column hidden="0" width="213" name="etat" type="field"/><column hidden="1" width="-1" type="actions"/></columns></attributetableconfig><conditionalstyles><rowstyles><style rule="etat LIKE \'%MANQUANT%\'" background_color="#fb9a99" name="" background_color_alpha="128"><font description="MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0" style=""/></style><style rule="etat LIKE \'%NON POSE%\'" background_color="#fbc14e" name="" background_color_alpha="128"><font description="MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0" style=""/></style><style rule="etat = \'OK\'" background_color="#9ad871" name="" background_color_alpha="128"><font description="MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0" style=""/></style><style rule="etat LIKE \'%CHANGER LE DIAMETRE POUR%\'" background_color="#71b6d8" name="" background_color_alpha="128"><font description="MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0" style=""/></style></rowstyles><fieldstyles><fieldstyle fieldname="etat"/><fieldstyle fieldname="diametre"><style rule="etat LIKE \'%MAUVAIS DIAMETRE%\'" name=""><font description="MS Shell Dlg 2,8.25,-1,5,50,0,0,0,0,0" style=""/><symbol alpha="1" name="icon" type="marker" clip_to_extent="1" force_rhr="0"><data_defined_properties><Option type="Map"><Option name="name" type="QString" value=""/><Option name="properties"/><Option name="type" type="QString" value="collection"/></Option></data_defined_properties><layer class="SimpleMarker" enabled="1" pass="0" locked="0"><Option type="Map"><Option name="angle" type="QString" value="0"/><Option name="cap_style" type="QString" value="square"/><Option name="color" type="QString" value="255,255,255,255"/><Option name="horizontal_anchor_point" type="QString" value="1"/><Option name="joinstyle" type="QString" value="bevel"/><Option name="name" type="QString" value="circle"/><Option name="offset" type="QString" value="0,0"/><Option name="offset_map_unit_scale" type="QString" value="3x:0,0,0,0,0,0"/><Option name="offset_unit" type="QString" value="MM"/><Option name="outline_color" type="QString" value="0,0,0,255"/><Option name="outline_style" type="QString" value="solid"/><Option name="outline_width" type="QString" value="0.4"/><Option name="outline_width_map_unit_scale" type="QString" value="3x:0,0,0,0,0,0"/><Option name="outline_width_unit" type="QString" value="MM"/><Option name="scale_method" type="QString" value="diameter"/><Option name="size" type="QString" value="4"/><Option name="size_map_unit_scale" type="QString" value="3x:0,0,0,0,0,0"/><Option name="size_unit" type="QString" value="MM"/><Option name="vertical_anchor_point" type="QString" value="1"/></Option><prop k="angle" v="0"/><prop k="cap_style" v="square"/><prop k="color" v="255,255,255,255"/><prop k="horizontal_anchor_point" v="1"/><prop k="joinstyle" v="bevel"/><prop k="name" v="circle"/><prop k="offset" v="0,0"/><prop k="offset_map_unit_scale" v="3x:0,0,0,0,0,0"/><prop k="offset_unit" v="MM"/><prop k="outline_color" v="0,0,0,255"/><prop k="outline_style" v="solid"/><prop k="outline_width" v="0.4"/><prop k="outline_width_map_unit_scale" v="3x:0,0,0,0,0,0"/><prop k="outline_width_unit" v="MM"/><prop k="scale_method" v="diameter"/><prop k="size" v="4"/><prop k="size_map_unit_scale" v="3x:0,0,0,0,0,0"/><prop k="size_unit" v="MM"/><prop k="vertical_anchor_point" v="1"/><data_defined_properties><Option type="Map"><Option name="name" type="QString" value=""/><Option name="properties"/><Option name="type" type="QString" value="collection"/></Option></data_defined_properties></layer></symbol></style></fieldstyle></fieldstyles></conditionalstyles><storedexpressions/><editform tolerant="1"></editform><editforminit/><editforminitcodesource>0</editforminitcodesource><editforminitfilepath></editforminitfilepath><editforminitcode><![CDATA[# -*- coding: utf-8 -*-"""Les formulaires QGIS peuvent avoir une fonction Python qui sera appel√©e √† l\'ouverture du formulaire.Utilisez cette fonction pour ajouter plus de fonctionnalit√©s √† vos formulaires.Entrez le nom de la fonction dans le champ "Fonction d\'initialisation Python".Voici un exemple √† suivre:"""from qgis.PyQt.QtWidgets import QWidgetdef my_form_open(dialog, layer, feature):	geom = feature.geometry()	control = dialog.findChild(QWidget, "MyLineEdit")]]></editforminitcode><featformsuppress>0</featformsuppress><editorlayout>generatedlayout</editorlayout><editable><field editable="1" name="correspondance"/><field editable="1" name="diametre"/><field editable="1" name="etat"/><field editable="1" name="id"/><field editable="1" name="nomamont"/><field editable="1" name="nomaval"/><field editable="1" name="typeamont"/><field editable="1" name="typeaval"/></editable><labelOnTop><field name="correspondance" labelOnTop="0"/><field name="diametre" labelOnTop="0"/><field name="etat" labelOnTop="0"/><field name="id" labelOnTop="0"/><field name="nomamont" labelOnTop="0"/><field name="nomaval" labelOnTop="0"/><field name="typeamont" labelOnTop="0"/><field name="typeaval" labelOnTop="0"/></labelOnTop><reuseLastValue><field name="correspondance" reuseLastValue="0"/><field name="diametre" reuseLastValue="0"/><field name="etat" reuseLastValue="0"/><field name="id" reuseLastValue="0"/><field name="nomamont" reuseLastValue="0"/><field name="nomaval" reuseLastValue="0"/><field name="typeamont" reuseLastValue="0"/><field name="typeaval" reuseLastValue="0"/></reuseLastValue><dataDefinedFieldProperties/><widgets/><previewExpression>"nomamont"</previewExpression><mapTip></mapTip><layerGeometryType>4</layerGeometryType></qgis>'
            
            checkcable = None
            checksupport = None
            checkpt = None
            checkcomparaison = None
            for layer in QgsProject.instance().mapLayers().values():
                if 'CB RAD' in layer.name():
                    cablelyrbase = layer
                    checkcable=1
                if 'POL RAD' in layer.name():
                    supportlyr = layer
                    checksupport=1
                if 'CH RAD' in layer.name():
                    ptlyr = layer
                    checkpt=1
                if 'COMPARAISON C3B' in layer.name():
                    comparaisonc3b = layer
                    checkcomparaison=1
                    
            if checkcable == 1 and checksupport == 1 and checkpt ==1 and checkcomparaison ==1 :
                supportlyr.removeSelection()
                cablelyrbase.removeSelection()
                ptlyr.removeSelection()
                
                field = QgsField('id', QVariant.LongLong)
                layer.addExpressionField('$id+14', field)
                
                parameters = { 'DISSOLVE' : False,
                    'DISTANCE' : 0.03,
                    'END_CAP_STYLE' : 0,
                    'INPUT' : cablelyrbase,
                    'JOIN_STYLE' : 0,
                    'MITER_LIMIT' : 2,
                    'OUTPUT' : 'TEMPORARY_OUTPUT',
                    'SEGMENTS' : 5 }
                cablelyr = processing.run("native:buffer", parameters)['OUTPUT']
                
                maxid = comparaisonc3b.fields().indexFromName('id')
                id = comparaisonc3b.maximumValue(maxid)
                
                
                templyr = QgsVectorLayer("None", "Resultat", "memory")
                QgsProject.instance().addMapLayer(templyr)
                templyr.dataProvider().addAttributes([QgsField('id', QVariant.Int),QgsField('typeamont', QVariant.String),QgsField('nomamont', QVariant.String),QgsField('typeaval', QVariant.String),QgsField('nomaval', QVariant.String),QgsField('diametre', QVariant.String),QgsField('etat', QVariant.String)])
                comparaisonc3b.selectAll()
                iface.copySelectionToClipboard(comparaisonc3b)
                templyr.startEditing()
                iface.pasteFromClipboard(templyr)

                idfield = templyr.fields().indexOf('id')
                typeamontfield = templyr.fields().indexOf('typeamont')
                nomamontfield = templyr.fields().indexOf('nomamont')
                typeavalfield = templyr.fields().indexOf('typeaval')
                nomamontfield = templyr.fields().indexOf('nomamont')
                diametrefield = templyr.fields().indexOf('diametre')
                etatfield = templyr.fields().indexOf('etat')
                
                for lignec3b in templyr.getFeatures():
                    templyr.changeAttributeValue(lignec3b.id(), diametrefield, lignec3b["diametre"].replace('.',','))
                

                for support in supportlyr.getFeatures():
                    supportlyr.select(support.id())
                    parameters = { 'INPUT' : cablelyr,
                        'INTERSECT' : QgsProcessingFeatureSourceDefinition(supportlyr.dataProvider().dataSourceUri(),selectedFeaturesOnly=True, featureLimit=-1, geometryCheck=QgsFeatureRequest.GeometryAbortOnInvalid),
                        'METHOD' : 0,
                        'PREDICATE' : [1] }
                    processing.run('qgis:selectbylocation', parameters)
                    parameters = { 'INPUT' : ptlyr, 'INTERSECT' : QgsProcessingFeatureSourceDefinition(supportlyr.dataProvider().dataSourceUri(), selectedFeaturesOnly=True, featureLimit=-1, geometryCheck=QgsFeatureRequest.GeometryAbortOnInvalid),
                    'METHOD' : 0,
                    'PREDICATE' : [0] }
                    processing.run('qgis:selectbylocation', parameters)
                    nomamont = None
                    proprietaireamont = None
                    typeamont = None
                    nomaval = None
                    proprietaireaval = None
                    typeaval = None
                    
                    
                    geom = support.geometry().asMultiPolyline()
                    amont = QgsPoint(geom[0][0])
                    aval = QgsPoint(geom[-1][-1])
                    for pt in ptlyr.getFeatures():
                        ptgeom = QgsPoint(pt.geometry().asPoint())
                        if ptgeom == amont:
                            nomamont = pt["REF_PROP"]
                            proprietaireamont = pt["PROPRIO"]
                            if pt["TYPE_STRUC"] == 'POTEAU':
                                if proprietaireamont == "ORANGE":
                                    typeamont = "A"
                                else :
                                    typeamont = "AT"
                                    nomamont = ""
                                    
                            elif pt["TYPE_STRUC"] == 'CHAMBRE':
                                if proprietaireamont == "ORANGE":
                                    typeamont = "C"
                                else :
                                    typeamont = "CT"
                                    nomamont = ""
                                    
                            elif pt["TYPE_STRUC"] == 'FACADE':
                                typeamont = "F"
                                nomamont = ""
                                
                            elif pt["TYPE_STRUC"] == 'POTELET':
                                if proprietaireamont == "ORANGE":
                                    typeamont = "P"
                                else :
                                    typeamont = "PT"
                                    nomamont = ""
                                    
                            elif pt["TYPE_STRUC"] == 'IMMEUBLE':
                                typeamont = "IMB"
                                nomamont = ""

                        elif ptgeom == aval:
                            nomaval = pt["REF_PROP"]
                            proprietaireaval = pt["PROPRIO"]
                            if pt["TYPE_STRUC"] == 'POTEAU':
                                if proprietaireaval == "ORANGE":
                                    typeaval = "A"
                                else :
                                    typeaval = "AT"
                                    nomaval = ""
                                    
                            elif pt["TYPE_STRUC"] == 'CHAMBRE':
                                if proprietaireaval == "ORANGE":
                                    typeaval = "C"
                                else :
                                    typeaval = "CT"
                                    nomaval = ""
                                    
                            elif pt["TYPE_STRUC"] == 'FACADE':
                                typeaval = "F"
                                nomaval = ""
                                
                            elif pt["TYPE_STRUC"] == 'POTELET':
                                if proprietaireaval == "ORANGE":
                                    typeaval = "P"
                                else :
                                    typeaval = "PT"
                                    nomaval = ""
                                    
                            elif pt["TYPE_STRUC"] == 'IMMEUBLE':
                                typeaval = "IMB"
                                nomaval = ""
                        
                    if nomamont == None : 
                        nomamont = "PB ACCROCHAGE SUPPORT"
                        typeamont = "PB ACCROCHAGE SUPPORT"
                    if nomaval == None : 
                        nomaval = "PB ACCROCHAGE SUPPORT"
                        typeaval = "PB ACCROCHAGE SUPPORT"
                                
                
                    for cable in cablelyr.selectedFeatures():
                        xid = 0
                        diametre='0'
                        if cable["CAPACITE"] == 12 and cable["MODE_POSE"] == 'SOUTERRAIN' :
                            diametre = '6,0'
                        if cable["CAPACITE"] == 24 and cable["MODE_POSE"] == 'SOUTERRAIN' :
                            diametre = '8,5'
                        if cable["CAPACITE"] == 36 and cable["MODE_POSE"] == 'SOUTERRAIN' :
                            diametre = '8,5'
                        if cable["CAPACITE"] == 48 and cable["MODE_POSE"] == 'SOUTERRAIN' :
                            diametre = '8,5'
                        if cable["CAPACITE"] == 72 and cable["MODE_POSE"] == 'SOUTERRAIN' :
                            diametre = '10,0'
                        if cable["CAPACITE"] == 96 and cable["MODE_POSE"] == 'SOUTERRAIN' :
                            diametre = '12,0'
                        if cable["CAPACITE"] == 144 and cable["MODE_POSE"] == 'SOUTERRAIN' :
                            diametre = '12,0'
                        if cable["CAPACITE"] == 288 and cable["MODE_POSE"] == 'SOUTERRAIN' :
                            diametre = '13,0'
                        if cable["CAPACITE"] == 432 and cable["MODE_POSE"] == 'SOUTERRAIN' :
                            diametre = '16,5'
                        if cable["CAPACITE"] == 576 and cable["MODE_POSE"] == 'SOUTERRAIN' :
                            diametre = '18,0'
                        if cable["CAPACITE"] == 720 and cable["MODE_POSE"] == 'SOUTERRAIN' :
                            diametre = '18,5'
                        if cable["CAPACITE"] == 864 and cable["MODE_POSE"] == 'SOUTERRAIN' :
                            diametre = '19,5'
                        if cable["CAPACITE"] == 12 and cable["MODE_POSE"] == 'AERIEN' :
                            diametre = '6,0'
                        if cable["CAPACITE"] == 24 and cable["MODE_POSE"] == 'AERIEN' :
                            diametre = '8,5'
                        if cable["CAPACITE"] == 36 and cable["MODE_POSE"] == 'AERIEN' :
                            diametre = '8,5'
                        if cable["CAPACITE"] == 48 and cable["MODE_POSE"] == 'AERIEN' :
                            diametre = '9,5'
                        if cable["CAPACITE"] == 72 and cable["MODE_POSE"] == 'AERIEN' :
                            diametre = '10,5'
                        if cable["CAPACITE"] == 96 and cable["MODE_POSE"] == 'AERIEN' :
                            diametre = '11,5'
                        if cable["CAPACITE"] == 144 and cable["MODE_POSE"] == 'AERIEN' :
                            diametre = '11,5'
                        diametre = diametre.replace('.',',')
                        correspondance1 = typeamont+' '+nomamont+' '+typeaval+' '+nomaval+' '+diametre
                        if proprietaireamont =="ORANGE" or proprietaireaval == "ORANGE" :
                            
                            templyr.removeSelection()
                            feature = QgsFeature()
                            feature.setAttributes([xid, typeamont, nomamont, typeaval, nomaval, diametre, "MANQUANT"])
                            templyr.addFeatures([feature])

                    supportlyr.removeSelection()
                    cablelyr.removeSelection()
                    ptlyr.removeSelection()
                    
                    
                for lignec3b in templyr.getFeatures():
                    correspondanceok = 'NOK'
                    if lignec3b["etat"] == qgis.core.NULL:
                        correspondance = lignec3b['typeamont']+' '+lignec3b['nomamont']+' '+lignec3b['typeaval']+' '+lignec3b['nomaval']+' '+lignec3b['diametre']
                        for checkcorrepondance in templyr.getFeatures():
                            correspondance1 = checkcorrepondance['typeamont']+' '+checkcorrepondance['nomamont']+' '+checkcorrepondance['typeaval']+' '+checkcorrepondance['nomaval']+' '+checkcorrepondance['diametre']
                            correspondance2 = checkcorrepondance['typeaval']+' '+checkcorrepondance['nomaval']+' '+checkcorrepondance['typeamont']+' '+checkcorrepondance['nomamont']+' '+checkcorrepondance['diametre']
                            if correspondance == correspondance1 and checkcorrepondance["etat"] == "MANQUANT":
                                if correspondanceok == 'NOK':
                                    templyr.changeAttributeValue(lignec3b.id(), etatfield, 'OK')
                                correspondanceok = 'OK'
                                templyr.deleteFeature(checkcorrepondance.id())
                            elif correspondance == correspondance2 and checkcorrepondance["etat"] == "MANQUANT":
                                if correspondanceok == 'NOK':
                                    templyr.changeAttributeValue(lignec3b.id(), etatfield, 'OK')
                                correspondanceok = 'OK'
                                templyr.deleteFeature(checkcorrepondance.id())
                            else :
                                nomamont = checkcorrepondance["nomamont"]
                                nomaval = checkcorrepondance["nomaval"]

                                while '/0' in nomamont:
                                    nomamont = nomamont.replace('/0','/')
                                while '/0' in nomaval:
                                    nomaval = nomaval.replace('/0','/')
                                correspondance3 = checkcorrepondance['typeamont']+' '+nomamont+' '+checkcorrepondance['typeaval']+' '+nomaval+' '+checkcorrepondance['diametre']
                                correspondance4 = checkcorrepondance['typeaval']+' '+nomaval+' '+nomamont+' '+checkcorrepondance['nomamont']+' '+checkcorrepondance['diametre']
                                if correspondance == correspondance3 and checkcorrepondance["etat"] == "MANQUANT":
                                    if correspondanceok == 'NOK':
                                        templyr.changeAttributeValue(lignec3b.id(), etatfield, 'OK')
                                    correspondanceok = 'OK'
                                    templyr.deleteFeature(checkcorrepondance.id())
                                elif correspondance == correspondance4 and checkcorrepondance["etat"] == "MANQUANT":
                                    if correspondanceok == 'NOK':
                                        templyr.changeAttributeValue(lignec3b.id(), etatfield, 'OK')
                                    correspondanceok = 'OK'
                                    templyr.deleteFeature(checkcorrepondance.id())



                        
                for lignec3b in templyr.getFeatures():
                    if lignec3b["etat"] == "MANQUANT":
                        changementdiametre = 0
                        ligne1 = lignec3b["typeamont"]+' '+lignec3b["nomamont"]+' '+lignec3b["typeaval"]+' '+lignec3b["nomaval"]
                        for comparaisonc3b in templyr.getFeatures():
                            comparaison1 = comparaisonc3b["typeamont"]+' '+comparaisonc3b["nomamont"]+' '+comparaisonc3b["typeaval"]+' '+comparaisonc3b["nomaval"]
                            comparaison2 = comparaisonc3b["typeaval"]+' '+comparaisonc3b["nomaval"]+' '+comparaisonc3b["typeamont"]+' '+comparaisonc3b["nomamont"]
                            if ligne1 == comparaison1 and comparaisonc3b["etat"] == qgis.core.NULL :
                                bondiametre = lignec3b["diametre"]
                                templyr.deleteFeature(lignec3b.id())
                                if changementdiametre == 0:
                                    templyr.changeAttributeValue(comparaisonc3b.id(), etatfield, "CHANGER LE DIAMETRE POUR "+bondiametre)
                                changementdiametre = 1
                            elif ligne1 == comparaison2 and comparaisonc3b["etat"] == qgis.core.NULL :
                                bondiametre = lignec3b["diametre"]
                                templyr.deleteFeature(lignec3b.id())
                                if changementdiametre == 0:
                                    templyr.changeAttributeValue(comparaisonc3b.id(), etatfield, "CHANGER LE DIAMETRE POUR "+bondiametre)
                                changementdiametre = 1
                            else :
                                nomamont = checkcorrepondance["nomamont"]
                                nomaval = checkcorrepondance["nomaval"]

                                while '/0' in nomamont:
                                    nomamont = nomamont.replace('/0','/')
                                while '/0' in nomaval:
                                    nomaval = nomaval.replace('/0','/')
                                comparaison1 = comparaisonc3b["typeamont"]+' '+nomamont+' '+comparaisonc3b["typeaval"]+' '+nomaval
                                comparaison2 = comparaisonc3b["typeaval"]+' '+nomaval+' '+nomamont+' '+comparaisonc3b["nomamont"]
                                if ligne1 == comparaison1 and comparaisonc3b["etat"] == qgis.core.NULL :
                                    bondiametre = lignec3b["diametre"]
                                    templyr.deleteFeature(lignec3b.id())
                                    if changementdiametre == 0:
                                        templyr.changeAttributeValue(comparaisonc3b.id(), etatfield, "CHANGER LE DIAMETRE POUR "+bondiametre)
                                    changementdiametre = 1
                                elif ligne1 == comparaison2 and comparaisonc3b["etat"] == qgis.core.NULL :
                                    bondiametre = lignec3b["diametre"]
                                    templyr.deleteFeature(lignec3b.id())
                                    if changementdiametre == 0:
                                        templyr.changeAttributeValue(comparaisonc3b.id(), etatfield, "CHANGER LE DIAMETRE POUR "+bondiametre)
                                    changementdiametre = 1
                    
                for lignec3b in templyr.getFeatures():
                    if lignec3b["etat"] == qgis.core.NULL:
                        templyr.changeAttributeValue(lignec3b.id(), etatfield, 'NON POSE')
                    if lignec3b["etat"] == "MANQUANT":
                        id+=1
                        templyr.changeAttributeValue(lignec3b.id(), idfield, id)
                        
            
                docXml = QDomDocument()
                docXml.setContent(code_style)
                templyr.importNamedStyle(docXml)
                templyr.triggerRepaint()
                templyr.commitChanges()
            
            else :
                QMessageBox.critical(self, "Erreur", 'Des couches sont manquantes')
                
